<script>
  // global variable to keep all card data, is downloaded once from the 
  // database 
  var cardData;

  var colors;  // needed later, TODO: refactor (bad pattern)


  const isNumeric = function(str) {
    // https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number
    if (typeof str != "string") return false // we only process strings!  
    return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
          !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail
  }

  
  const capitalize = function(str) {
    // capitalize the first char of a string
    return str.charAt(0).toUpperCase() + str.slice(1);
  }


  const load = async function(url) {
    // loads text data from a given API
    try {
      const response = await fetch(url);
      const text = await response.text();
      return text;
    } catch (err) {
      console.error(err);
    }
  }


  const download = function(content, fileName, contentType) {
    // generic client-side download prompt
    let a = document.createElement("a");
    let file = new Blob([content], {type: contentType});
    a.href = URL.createObjectURL(file);
    a.download = fileName;
    a.click();
  }


  // -------------------- TABLE SORTING ----------------------------------------

  const sortTableRowsByColumn = function(table, columnIndex, ascending) {
    // https://stackoverflow.com/questions/59282842/how-to-make-sorting-html-tables-faster

    const rows = Array.from(table.querySelectorAll(':scope > tbody > tr'));
    rows.sort((x, y) => {
      // try converting to a float
      let xValue = x.cells[columnIndex].textContent;
      let yValue = y.cells[columnIndex].textContent;

      if (isNumeric(xValue) && isNumeric(yValue)) {
        xValue = parseFloat(xValue);
        yValue = parseFloat(yValue);
      }
      return ascending ? ( xValue > yValue ) : ( yValue > xValue ); // <-- Neat comparison trick.
    });

    // There is no need to remove the rows prior to adding them in-order because `.appendChild` will relocate existing nodes.
    for (let row of rows) {
      table.tBodies[0].appendChild( row );
    }
  }


  const onColumnHeaderClicked = function(ev) {
    const th = ev.currentTarget;
    const table = th.closest( 'table' );
    const thIndex = Array.from( th.parentElement.children ).indexOf( th );
    const ascending = th.dataset.sort != 'asc';

    sortTableRowsByColumn( table, thIndex, ascending );

    const allTh = table.querySelectorAll( ':scope > thead > tr > th' );
    for (let th2 of allTh) {
      delete th2.dataset['sort'];
    }

    th.dataset['sort'] = ascending ? 'asc' : 'desc';
  }



  const getDeck = function(deckID) {
    if (deckID === undefined) { 
      // deckID = localStorage.getItem('currentDeckID'); 
      deckID = getIDnumber();
    }

    let blueprint = {
      id: deckID,
      cards: {},
      name: "Untitled Deck",
      leader: null,
      money: 0
    };

    // retrieves the current user created deck from local storage
    if (!localStorage.getItem(deckID)) {
      // if there is no currentDeck, set it as an empty array
      localStorage.setItem(deckID, JSON.stringify(blueprint));
    }
    // parse string from storage and return an object
    let deck = JSON.parse(localStorage.getItem(deckID));

    // test if deck object matches the blueprint
    // necessary if the users have an older version in the cache
    for (const key in blueprint) {
      if (!Object.keys(deck).includes(key)) {
        alert(`Warning: A deck in your cache seems to be an older version. Deck "${deck.name}" deleted.`)
        console.log(deck);
        localStorage.removeItem(deckID);

        deck = JSON.parse(JSON.stringify(blueprint));
        break;
      }
    }
    return deck;
  }


  const isInDeck = function(id) {
    return (id in getDeck(localStorage.getItem('currentDeckID')).cards);
  }


  const saveDeck = function(deck, deckID) {
    if (deckID === undefined) { 
      deckID = 'deck-' + getIDnumber();
    }
    // puts the deck object back into local storage as string
    localStorage.setItem(deckID, JSON.stringify(deck));
  }


  const deleteDeck = function(deckID) {
    if (deckID === undefined) { 
      console.log('Cannot delete deck with undefined ID');
      return;
    }
    if (!localStorage.hasOwnProperty(deckID)) {
      console.log(`"${deckID}" does not exist in storage`);
      return;
    }
    // clears the decklist from local storage
    localStorage.removeItem(deckID);
  }

  
  const addCardtoDeck = async function(deck, card, saveToStorage=false) {
    // adds a new card to the deck in local storage

    if (cardData === undefined) {
      // fetch the card data once (into RAM)
      cardData = await getAllCards();
    }

    // check if this card is in the deck
    if (card.id in deck.cards) {
      // alert("This card is already in your deck!");
      return;
    }

    // combine with card data from database
    card.data = cardData[card.id];

    if (card.leader) {
      deck.leader = card;
    }
    deck.cards[card.id] = card;

    // put deck array back into storage
    if (saveToStorage) {
      let currentDeckID = localStorage.getItem('currentDeckID');
      saveDeck(deck, currentDeckID);
    }

    return deck;
  }


  const removeCardFromDeck = function(cardID, saveToStorage=false) {
    // removes a card from the deck in local storage

    // check if this card is in the deck
    if (!(cardID in currentDeck.cards)) {
      return;
    }
    delete currentDeck.cards[cardID];

    // delete as leader
    if (currentDeck.leader && currentDeck.leader.id === cardID) {
      currentDeck.leader = null;
    }

    // put deck array back into storage
    if (saveToStorage) {
      let currentDeckID = localStorage.getItem('currentDeckID');
      saveDeck(currentDeck, currentDeckID);
    }
  }


  const getAllCards = async function() {
    // get all cards from Database
    let response = await fetch("/api/all-cards");
    let data = await response.json();

    cards = {};
    // reformat with id as keys
    data.forEach(card => {
      cards[card.id] = card;
    });

    return cards;
  }


  const exportDeckTxt = function(deck) {
    let txt = `[deck="${deck.name}"]\n`;
    
    // get leader name
    const leader = deck.leader?.data.name;
    txt += `//Captain\n${leader}\n\n//Deck\n`;

    Object.entries(deck.cards).forEach(([key, card]) => {
      if(!card.leader) {
        txt += `1 ${card.data.name}\n`;
      }
    });

    const money = deck.money;
    txt += `${money} Money`;

    // deck legality check (rows.length starting at one and the leader cancel out)

    let validity = checkDeckValidity(deck);
    if (!validity.valid) {
      console.log(validity.errorMsg)
      return '';
    }
    return txt;
  }


  const checkDeckValidity = function(deck) {
    let errorMsg = [];
    let output = {
      valid: true,
      errorMsg: ''
    };

    const leader = deck.leader?.data.name;
    if (!leader) {
      output.valid = false;
      errorMsg.push('- Your deck does not have a Captain');
    }

    let decklen = Object.entries(deck.cards).length + parseInt(deck.money);
    if (decklen < 45) {
      output.valid = false;
      errorMsg.push(`- Your deck doesn\'t have enough cards (at least 45 including your Captain and Money)`);
    }

    output.errorMsg = 'Your deck is invalid for these reasons:<br>' + errorMsg.join('<br>');
    return output;
  }


  const downloadDeckString = function() {
    const deck = getDeck(currentDeckID);
    let deckString = exportDeckTxt(deck);
    let filename = `${deck.name.replace(/[.\s]+/g, "_").toLowerCase()}.txt`;
    download(deckString, filename, 'text/csv;charset=utf-8;');
  }


  const getIDnumber = function() {
    // creates a new unique deck id number
    let ids = Object.keys(localStorage);
    ids = ids.filter(elem => elem !== 'currentDeckID');
    ids = ids.map(elem => elem.split('-')[1]).sort((a, b) => parseInt(a) > parseInt(b));

    if (ids.length === 0) {
      // console.log('Nothing in local storage')
      return 0;
    }

    return parseInt(ids[ids.length-1]) + 1;
  }


  const loadDeckFromFile = async function(deckString, name="", id) {
    if (id === undefined) { 
      id = 'deck-' + getIDnumber();
    };

    let errors = [];
    // check if string has deck name information
    let deckNameMatch = deckString.match(/\[deck\=\"(.+)\"/);
    if (deckNameMatch) {
      name = deckNameMatch[1];
    }

    let leader = deckString.match(/\/\/Captain\s*(.+)\s/)?.[1];
    if (leader === undefined) {
      errors.push('- List ist missing a Captain.');
    }

    let rawCards = deckString.match(/\/\/Deck\s*(.+)/s)?.[1].split(/\r?\n/);
    rawCards = rawCards.slice(1, rawCards.length);

    if (cardData === undefined) {
      // fetch the card data once (into RAM)
      cardData = await getAllCards();
    }

    let deck = getDeck(id);
    deck.name = name;
    let cards = rawCards.map(elem => elem.split(/[0-9]+\s/)[1]);
    cards.push(leader);
    
    for (const cardname of cards) {
      if (cardname === undefined) {
        errors.push('- Unidentified card name.');
        continue;
      }

      // guess id from cardname
      let idGuess = cardname.toLowerCase()
        .replace('.', '')
        .replace(/[.\s-]+/g, '_')
        // replace umlauts
        .replace('ä', 'ae')
        .replace('ö', 'oe')
        .replace('ü', 'ue');

      if (idGuess === 'money') {
        deck.money = deckString.match(/([0-9]+)\sMoney/)[1];
      } else {
        let card = {
          id: idGuess,
          leader: cardname === leader ? true : false
        };
        card.data = cardData[idGuess];
        card.name = card.data.name;
        deck.cards[idGuess] = card;

        if (card.leader) { deck.leader = card }
      }
    }

    if (errors.length > 0) {
      // TODO make alert optional
      alert('Invalid or corrupted file:\n' + errors.join('\n'));
      return;
    }
    saveDeck(deck, id);
  }


  const truncateDeckName = function(rawName, maxSize=35) {
    // truncates the deck name string for display
    if (rawName === null || rawName.length === 0) return "Untitled Deck";
    if (rawName.length <= maxSize) return rawName;
    return rawName.slice(0, maxSize) + '[...]';
  }


  const loadPreconFile = async function(url, id) {
    text = await load(url);
    loadDeckFromFile(text, null, id);
    // localStorage.setItem('currentDeckID', id);
  }

  

  // ------------------- utils -------------------------------------------------

  const imageErrorHandler = function(img) {
    // load a local default image on Error
    img.src = '/images/Image_Not_Found.jpg';
  }


</script>
