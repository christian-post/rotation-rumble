<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head'); %>
  <script>
    var currentDeckID = urlParams.get('deck');
  </script>
</head>

<body>

<header>
  <%- include('../partials/header'); %>
</header>

<main>
  <div class="grid-container">
    <div class="grid-item | deckbuilder-cta">
      <button class="standard-button" onclick="newDeck()">New Deck</button>
      <div class="button-container-h">
        <input type="file" id="deck-upload" name="deck-upload" accept="text/*,.txt"/>
        <button class="standard-button" onclick="importDeck()">Import Deck</button>
      </div>

      <div class="form-container">
        <form class="select-deck-form" id="select-deck-form" action="/deck-editor">  
          <label for="deck-selector">Decks in Storage</label>
          <select name="deck" id="deck-selector" size="5">
          </select>
          <!-- <input class="standard-button" type="submit" value="Edit Deck" /> -->
        </form>
        <div class="button-container-h" id="bottom-buttons">
          <button class="standard-button" onclick="viewSelectedDeck()">View Deck</button>
          <button class="standard-button" onclick="editSelectedDeck()">Edit Deck</button>
          <button class="standard-button" onclick="deleteSelectedDeck()">Delete Deck</button>
        </div>
      </div>
    </div>
  </div>
 
</main>

<footer>
  <%- include('../partials/footer'); %>
</footer>

</body>

<script>

  const viewSelectedDeck = function() {
    let value = document.querySelector('#deck-selector').value;
    if (value.length === 0) return;
    window.location.href = '/visual-deckstats?deck=' + value;
  }

  const editSelectedDeck = function() {
    let value = document.querySelector('#deck-selector').value;
    if (value.length === 0) return;
    window.location.href = '/deck-editor?deck=' + value;
  }


  const deleteSelectedDeck = function() {
    let value = document.querySelector('#deck-selector').value;
    if (value.length === 0) return;

    let deck = getDeck(value);
    let msg = `Do you want to delete "${deck.name}"?`;
    if (confirm(msg)) {
      deleteDeck(value);
      makeSelector();
    }
  }


  const getIDnumber = function() {
    // gets a new unique deck id number
    let ids = Object.keys(localStorage).sort();
    if (ids.length) {
      let lastID = ids[ids.length-1].split('-')[1];
      return  parseInt(lastID) + 1;
    } else {
      return 0;
    }
  }


  const newDeck = function() {
    // check which deck IDs are currently used
    window.location.href = '/deck-editor?deck=deck-' + getIDnumber();
  }


  const importDeck = async function() {
    let files = document.querySelector('#deck-upload').files;
    if (files.length > 0) {
      currentDeckID = 'deck-' + getIDnumber();

      // parse deck file
      let filecontent = await files[0].text();
      let cards = await parseDeckString(filecontent, files[0].name.split('.txt')[0]);
    }
    // update page
    makeSelector();
  }


  const makeSelector = function() {
    // get deck decks from local storage and put in select form
    if (Object.keys(localStorage).length === 0) {
      document.querySelector('.select-deck-form').style.display = 'none';
      document.querySelector('#bottom-buttons').style.display = 'none';
    } else {
      document.querySelector('.select-deck-form').style.display = 'flex';
      document.querySelector('#bottom-buttons').style.display = 'flex';
    }

    document.querySelector('#deck-selector').innerHTML = '';

    for (let deckID of Object.keys(localStorage))  {
      let deck = getDeck(deckID);
      let option = document.createElement('option');
      option.value = deckID;
      option.textContent = truncateDeckName(deck.name, 50) || 'Untitled Deck'; 
      document.querySelector('#deck-selector').appendChild(option);
    }
  }

  // on page load
  makeSelector();
 
</script>

<%- include('../partials/postprocessing'); %>
</html>