<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head'); %>

  <script>
    // get the deck ID which was passed to the URL
    const urlParams = new URLSearchParams(window.location.search);
    var currentDeckID = urlParams.get('deck');
  </script>
</head>
<body>

<header>
  <%- include('../partials/header'); %>
</header>

<main>
  <div class="visual-deckstats-body">
    <div class="deckstats-header">
      <button class="standard-button" onclick="changeToDeckEditor()">ðŸ–Š Edit Deck</button>
    </div>

    <div class="tab">
      <button class="tablinks" onclick="openTab(event, 'tab-overview')" id="defaultOpen">ðŸ§¾ Table View</button>
      <button class="tablinks" onclick="openTab(event, 'tab-visual')">&#128064 Card View</button>
      <button class="tablinks" onclick="openTab(event, 'tab-stats')">ðŸ“Š Details</button>
      <button class="tablinks" onclick="openTab(event, 'tab-share')">â†ª Share</button>
    </div>

    <div id="tab-overview" class="tabcontent">
      <div class="decklist">
        <div id="decklist-header">
        </div>
        <div id="decklist-body"></div>
        <div id="decklist-leader-container"></div>
      </div>
    </div>

    <div id="tab-visual" class="tabcontent">
      <div class="visual-tab-card-container"></div>
    </div>

    <div id="tab-stats" class="tabcontent">
      <div id="stats-container">
        <div class="stats-element">
          <span id="hire-costs-title">Hire Costs - X.X avg.</span>
          <div>
            <canvas id="casting-costs"></canvas>
          </div>
        </div>

        <div class="stats-element">
          <div>Card Types</div>
          <div>
            <canvas id="card-types"></canvas>
          </div>
        </div>

        <div class="stats-element">
          <div>Colors</div>
          <div>
            <canvas id="colors"></canvas>
          </div>
        </div>

        <div class="deckstats-footer">
          <p>
            powered by <a href="https://github.com/chartjs/Chart.js" target="blank">Chart.js</a>
          </p>
        </div>
      </div>
    </div>

    <div id="tab-share" class="tabcontent">
      <div class="decklistString-container">
        <textarea id="decklistString" rows="12" cols="30" readonly></textarea>
        <div class="copyClipboard-container">
          <button id="copyClipboardButton"class="standard-button" 
           onclick="copyDeckString()" onmouseout="changeTooltipText()">
            <span class="tooltiptext" id="myTooltip">Copy to clipboard</span>
            Copy Deck
          </button>
        </div>
        <button class="standard-button" onclick="downloadDeckString()">Export Deck</button>
      </div>
    </div>
  </div>
</main>

<footer>
  <%- include('../partials/footer'); %>
</footer>

</body>

<script src='/js/chart.min.js'></script>
<script>
  // ---- Tab Stuff ------------------------------------------------------------

  const openTab = function(event, elemID) {
    let i, tabcontent, tablinks;

    document.querySelectorAll(".tabcontent")
      .forEach(item => {
        item.style.display = "none";
      });

    document.querySelectorAll(".tablinks")
      .forEach(item => {
        item.className = item.className.replace(" active", "");
      });

    let tab = document.getElementById(elemID);
    if (tab) {
      tab.style.display = "block";
      event.currentTarget.className += " active";
    } else {
      console.log(`Tab ${elemID} does not exist.`);
    }
    
  }

  // Get the element with id="defaultOpen" and click on it
  document.getElementById("defaultOpen").click();

  // -------- Dynamic Deck list ------------------------------------------------
  // define empty data
  const manaCosts = [
    { cost: '0', amount: 0 },
    { cost: '1', amount: 0 },
    { cost: '2', amount: 0 },
    { cost: '3', amount: 0 },
    { cost: '4', amount: 0 },
    { cost: '5', amount: 0 },
    { cost: '6+', amount: 0 },
  ];

  const cardtypes = {
    Fighter: 0,
    Item: 0,
    Landscape: 0,
    Challenge: 0,
    Money: 0,
  };

  const colorStats = {
    red: 0,
    green: 0,
    blue: 0,
    black: 0,
  };

  // get data from deck in local storage
  const deck = getDeck(currentDeckID);

  document.querySelector('#decklist-header').innerHTML = deck.name;

  Object.entries(deck.cards).forEach(([key, card]) => {
    let cost = parseInt(card.data.hire);
    manaCosts[Math.min(cost, 6)].amount += 1;

    cardtypes[card.data.cardtype] += 1
    colorStats[card.data.color] += 1
  });

  cardtypes.Money = parseInt(deck.money);

  // calculate average mana cost
  let cardsArray = Array.from(Object.values(deck.cards));

  let hireSum = 0;
  cardsArray.forEach(card => {
    hireSum += parseInt(card.data.hire);
  });
  let avg = hireSum / cardsArray.length;
  
  document.querySelector('#hire-costs-title').innerHTML = `Hire Costs - ${avg.toFixed(1)} avg.`;

  const colormap = [
    'rgb(165, 0, 38)',
    'rgb(188, 22, 38)',
    'rgb(214, 47, 38)',
    'rgb(229, 77, 52)',
    'rgb(244, 109, 67)',
    'rgb(248, 142, 82)',
    'rgb(252, 172, 96)',
    'rgb(253, 198, 120)',
    'rgb(254, 224, 144)',
    'rgb(254, 239, 167)',
    'rgb(254, 254, 192)',
    'rgb(239, 249, 218)',
    'rgb(224, 243, 247)',
    'rgb(196, 229, 240)',
    'rgb(169, 216, 232)',
    'rgb(141, 193, 220)',
    'rgb(116, 173, 209)',
    'rgb(92, 144, 194)',
    'rgb(68, 115, 179)',
    'rgb(58, 83, 163)',
  ];

  const colorCode = {
    red: 'rgb(212, 50, 39)',
    blue: 'rgb(72, 164, 215)',
    black: 'rgb(160, 160, 160)',
    green: 'rgb(76, 147, 89)'
  };

  // ----- Charts  ---------

  new Chart(
    document.getElementById('casting-costs'),
    {
      type: 'bar',
      options: {
        plugins: {
          legend: { display: false }
        }
      },
      data: {
        labels: manaCosts.map(row => row.cost),
        datasets: [{
            label: 'Hire Cost',
            data: manaCosts.map(row => row.amount),
            borderColor: '#36A2EB',
            backgroundColor: '#9BD0F5'
          }]
      }
    }
  );


  new Chart(
    document.getElementById('card-types'),
    {
      type: 'pie',
      options: {
        plugins: {
          legend: { 
            display: true,
            position: 'right'
          }
        }
      },
      data: {
        labels: Object.keys(cardtypes),
        datasets: [{
            label: 'Card Types',
            data: Object.values(cardtypes),
            backgroundColor: [
              colormap[0],
              colormap[5],
              colormap[10],
              colormap[15],
              colormap[19],
            ]
          }]
      }
    }
  );


  new Chart(
    document.getElementById('colors'),
    {
      type: 'pie',
      options: {
        maintainAspectRatio: false,  // fixed height based on available space
        plugins: {
          legend: { 
            display: false
          }
        }
      },
      data: {
        labels: Object.keys(colorStats),
        datasets: [{
            label: 'Card Types',
            data: Object.values(colorStats),
            backgroundColor: [
              colorCode.red,
              colorCode.green,
              colorCode.blue,
              colorCode.black,
            ]
          }]
      }
    }
  );

  const fillLeaderContainer = async function() {
    // TODO: this is getting really messy

    if (cardData === undefined) {
      // fetch the card data once (into RAM)
      cardData = await getAllCards();
    }

    const deck = getDeck(currentDeckID);

    // leader image
    let container = document.querySelector('#decklist-leader-container');

    let leaderTitle = document.createElement('h3');
    leaderTitle.innerHTML = `Leader: ${deck.leader?.data.name}`;
    container.appendChild(leaderTitle);

    let image = document.createElement('img');
    image.id = 'leader-image';

    let imageSrc = cardData[deck.leader?.data.id]?.image_url;

    image.src = imageSrc || 'images/notfound.png';
    image.width = '300';
    container.appendChild(image);
  }

  fillLeaderContainer()
  

  // Deck list table
  dbody = document.getElementById('decklist-body');

  for (const card of cardsArray) {
    if (card.leader) continue;

    // check if there is a div for this type
    let sectionID = `decklist-section-${card.data.cardtype}`;
    let listID = `decklist-ul-${card.data.cardtype}`;
    let section = document.getElementById(sectionID);

    let ul = document.getElementById(listID);

    if (section === null) {
        section = document.createElement('section');
        section.id = sectionID;
        dbody.appendChild(section);

        let head = document.createElement('h3');
        head.innerHTML = `${card.data.cardtype}s (${cardtypes[card.data.cardtype]})`;
        section.append(head);

        ul = document.createElement('ul');
        ul.id = listID;
        section.append(ul);
    }
    let li = document.createElement('li');
    li.innerHTML = card.data.name;
    ul.appendChild(li);
  }

  // Money amount
  let moneySection = document.createElement('section');
  let head = document.createElement('h3');
  head.innerHTML = `Money (${deck.money})`;
  moneySection.append(head);
  dbody.appendChild(moneySection);

  const changeToDeckEditor = function() {
    window.location.href = `/deck-editor?deck=${currentDeckID}`;
  }

  // ------------------ Card View Tab ------------------------------------------

  let visualTab = document.querySelector('.visual-tab-card-container');

  for (const card of cardsArray) {
    let cardImage = document.createElement('img');
    cardImage.src = card.data?.image_url;
    cardImage.className = 'card-image-medium';
    visualTab.appendChild(cardImage);
    
    // TODO: highlight Leader image
    // if (card.leader) {
    //   cardImage.style['border'] = '5px solid var(--color-orange)';
    //   cardImage.style['border-radius'] = '20px';
    //   let leaderS = document.createElement('span');
    //   leaderS.textContent = 'Leader';
    //   // TODO: style this in the CSS file
    //   leaderS.style['background-color'] = 'var(--color-orange)';
    //   leaderS.style['color'] = 'white';
    //   leaderS.style['padding'] = '.25rem';
    //   leaderS.style['border-radius'] = '.5rem';
    //   leaderS.style['position'] = 'absolute';
    //   visualTab.appendChild(leaderS)
    // }
  }


  // ---------------- Share deck Tab -------------------------------------------

  let deckString = exportDeckTxtNew(deck);
  document.querySelector('#decklistString').value = deckString;

  const copyDeckString = function() {
    let str = document.querySelector('#decklistString').value;
    navigator.clipboard.writeText(str);
    let tooltip = document.querySelector('.tooltiptext');
    tooltip.innerHTML = "Deck copied to clipboard!";
  }

  const changeTooltipText = function() {
    let tooltip = document.querySelector('.tooltiptext');
    tooltip.innerHTML = "Copy to clipboard";
  }
</script>

</html>